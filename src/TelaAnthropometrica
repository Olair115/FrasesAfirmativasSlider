import React, { useState } from 'react';

const TelaAnthropometrica = ({ onVoltar }) => {
  // ‚úÖ SE√á√ÉO A: DADOS B√ÅSICOS
  const [dadosAntro, setDadosAntro] = useState({
    idade: '',
    altura: '',
    peso: '',
    genero: '',
    cep: '', // ‚Üê NOVO! Para clima
    atividadeFisica: 'sedentario'
  });

  // ‚úÖ SE√á√ÉO B: CONDI√á√ïES ESPECIAIS
  const [condicoes, setCondicoes] = useState({
    doencas: [],
    medicamentos: [],
    cirurgias: '',
    sequelas: ''
  });

  // ‚úÖ SE√á√ÉO C: RESULTADOS
  const [resultados, setResultados] = useState(null);
  
  // üå§Ô∏è SE√á√ÉO D: CLIMA/TEMPO
  const [dadosClima, setDadosClima] = useState(null);
  const [carregandoClima, setCarregandoClima] = useState(false);
  // üß† INTERPRETA√á√ÉO INTELIGENTE BASEADA NOS MATERIAIS
  const getInterpretacaoInteligente = (idade, imc, atividade, genero, condicoes) => {
    let categoria = "";
    let texto = "";
    let alertas = [];
    let biomarcadores = "";

    // ‚úÖ FAIXAS ET√ÅRIAS ESPEC√çFICAS (baseadas nos materiais)
    if (idade < 20) {
      categoria = "üßí Avalia√ß√£o Jovem (Percentis)";
      texto = "Nesta fase, o IMC √© avaliado por curvas de percentil da OMS. Ideal entre percentis 5-85. Recomenda-se avalia√ß√£o profissional especializada.";
    } 
    else if (idade >= 78) {
      // SENESC√äNCIA (78+)
      if (imc < 23) {
        categoria = "‚ö†Ô∏è Risco Nutricional (Senesc√™ncia)";
        texto = "Para senesc√™ncia (78+ anos), IMC abaixo de 23 indica alto risco de desnutri√ß√£o e sarcopenia. Faixa ideal: 23-29.9 kg/m¬≤.";
        alertas.push("Risco de sarcopenia");
      } else if (imc <= 29.9) {
        categoria = "‚úÖ Faixa Ideal (Senesc√™ncia)";
        texto = "Excelente! Para sua idade (78+ anos), manter IMC entre 23-29.9 est√° associado √† maior reserva funcional e longevidade.";
      } else {
        categoria = "‚ö†Ô∏è Monitoramento (Senesc√™ncia)";
        texto = "IMC acima de 30 requer monitoramento, mas considera-se a reserva energ√©tica importante nesta fase.";
      }
    }
    else if (idade >= 65) {
      // TERCEIRA IDADE (65-77)
      if (imc < 22) {
        categoria = "‚ö†Ô∏è Aten√ß√£o Nutricional (Idosos)";
        texto = "Para idosos, IMC abaixo de 22 pode indicar risco de desnutri√ß√£o e perda de massa muscular. Faixa ideal: 22-27 kg/m¬≤.";
        alertas.push("Poss√≠vel sarcopenia");
      } else if (imc <= 27) {
        categoria = "‚úÖ Faixa Saud√°vel (Maturidade)";
        texto = "Parab√©ns! Manter IMC entre 22-27 na maturidade est√° associado a maior reserva funcional e prote√ß√£o contra fragilidade.";
      } else {
        categoria = "‚ö†Ô∏è Ponto de Aten√ß√£o (Idosos)";
        texto = "IMC acima de 27 pode aumentar riscos metab√≥licos, mas considere composi√ß√£o corporal.";
      }
    }
    else {
      // ADULTOS (20-64)
      if (imc < 18.5) {
        categoria = "‚ö†Ô∏è Abaixo do Peso";
        texto = "IMC abaixo de 18.5 pode indicar necessidade de maior aporte nutricional e avalia√ß√£o m√©dica.";
      } else if (imc < 25) {
        categoria = "‚úÖ Peso Normal";
        texto = "Excelente! Seu IMC est√° na faixa considerada ideal, associada a menores riscos de doen√ßas cr√¥nicas.";
      } else if (imc < 30) {
        categoria = "‚ö†Ô∏è Sobrepeso";
        texto = "Seu IMC indica sobrepeso. Esta √© uma oportunidade para reavaliar h√°bitos alimentares e de atividade f√≠sica.";
      } else {
        categoria = "üî¥ Obesidade";
        texto = "Seu IMC est√° na faixa de obesidade, requerendo aten√ß√£o especial e acompanhamento profissional.";
      }
    }

    // ‚úÖ PARADOXO DE HOLYFIELD (Atletas)
    if (imc >= 25 && (atividade === 'intensa' || atividade === 'atleta')) {
      alertas.push("‚ö° PARADOXO DE HOLYFIELD: Como voc√™ tem atividade f√≠sica intensa, um IMC elevado pode refletir maior massa muscular, n√£o gordura. Recomenda-se an√°lise de composi√ß√£o corporal.");
    }

    // ‚úÖ CONDI√á√ïES ESPECIAIS
    if (condicoes.doencas.length > 0) {
      alertas.push(`üè• Condi√ß√µes relatadas: ${condicoes.doencas.join(', ')}. Interpreta√ß√£o deve considerar contexto cl√≠nico.`);
    }

    // ‚úÖ BIOMARCADORES (baseado no material)
    biomarcadores = `üìä IDADE BIOL√ìGICA: Considerando IMC + idade cronol√≥gica, recomenda-se avalia√ß√£o de biomarcadores como tel√¥meros, inflama√ß√£o e metila√ß√£o do DNA para interpreta√ß√£o mais precisa do envelhecimento biol√≥gico.`;

    return {
      categoria,
      texto,
      alertas,
      biomarcadores
    };
  };
  // üå§Ô∏è INTEGRA√á√ÉO CLIMA/TEMPO VIA CEP
  const buscarClimaPorCEP = async (cep) => {
    if (!cep || cep.length < 8) {
      alert('Por favor, digite um CEP v√°lido!');
      return;
    }
    
    setCarregandoClima(true);
    try {
      // 1. Primeiro busca coordenadas via CEP (ViaCEP)
      const responseCEP = await fetch(`https://viacep.com.br/ws/${cep.replace(/\D/g, '')}/json/`);
      const dadosCEP = await responseCEP.json();
      
      if (dadosCEP.erro) {
        alert('CEP n√£o encontrado!');
        setCarregandoClima(false);
        return;
      }

      // 2. Depois busca clima via coordenadas (OpenWeather)
      // SUBSTITUA 'SUA_API_KEY_AQUI' pela sua chave do OpenWeatherMap
      const API_KEY = 'b53f0a0ed4b61af74863b957dfd00030';
      const responseClima = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?q=${dadosCEP.localidade},BR&appid=${API_KEY}&units=metric&lang=pt_br`
      );
      const clima = await responseClima.json();
      
      if (clima.cod !== 200) {
        alert('Erro ao buscar dados clim√°ticos');
        setCarregandoClima(false);
        return;
      }
      
      setDadosClima({
        cidade: dadosCEP.localidade,
        uf: dadosCEP.uf,
        bairro: dadosCEP.bairro,
        temperatura: Math.round(clima.main.temp),
        umidade: clima.main.humidity,
        sensacao: Math.round(clima.main.feels_like),
        descricao: clima.weather[0].description,
        pressao: clima.main.pressure,
        vento: clima.wind?.speed || 0
      });
      
    } catch (error) {
      console.error('Erro ao buscar clima:', error);
      alert('Erro ao consultar dados clim√°ticos. Verifique sua conex√£o.');
    } finally {
      setCarregandoClima(false);
    }
  };

  // üå°Ô∏è CORRELA√á√ÉO CLIMA x METABOLISMO
  const getRecomendacaoClimatica = (temperatura, umidade, imc) => {
    let recomendacao = "";
    let impactoMetabolico = "";
    
    // TEMPERATURA
    if (temperatura > 32) {
      recomendacao = "üî• CALOR EXTREMO: Aumenta necessidade h√≠drica em 700-1000ml/dia. Metabolismo basal reduz 5-10%. Prefira alimentos leves, frutas e hidratantes.";
      impactoMetabolico = "Redu√ß√£o metab√≥lica + maior perda de eletr√≥litos";
    } else if (temperatura > 25) {
      recomendacao = "‚òÄÔ∏è CALOR MODERADO: Hidrata√ß√£o extra (+500ml/dia). Evite exerc√≠cios intensos entre 10h-16h.";
      impactoMetabolico = "Metabolismo ligeiramente reduzido";
    } else if (temperatura < 10) {
      recomendacao = "‚ùÑÔ∏è FRIO INTENSO: Metabolismo aumenta 10-15% para manter temperatura corporal. Corpo demanda +200-300 kcal/dia. Prefira alimentos termog√™nicos.";
      impactoMetabolico = "Aumento significativo do gasto energ√©tico";
    } else if (temperatura < 18) {
      recomendacao = "üå¨Ô∏è FRIO MODERADO: Ligeiro aumento metab√≥lico (+5-8%). Boa para exerc√≠cios ao ar livre.";
      impactoMetabolico = "Pequeno aumento metab√≥lico";
    } else {
      recomendacao = "üå§Ô∏è TEMPERATURA IDEAL: Condi√ß√µes favor√°veis para metabolismo equilibrado e atividades f√≠sicas.";
      impactoMetabolico = "Metabolismo em zona de conforto";
    }
    
    // UMIDADE
    if (umidade > 80) {
      recomendacao += " üíß UMIDADE ALTA: Dificulta regula√ß√£o t√©rmica. Hidrate-se mais e evite roupas sint√©ticas.";
    } else if (umidade < 30) {
      recomendacao += " üèúÔ∏è AR SECO: Aumenta perda de √°gua por respira√ß√£o. Hidrata√ß√£o redobrada!";
    }
    
    return { recomendacao, impactoMetabolico };
  };
  // üß† CALCULADORA INTELIGENTE DO IMC
  const calcularIMC = () => {
    // Valida√ß√£o b√°sica
    if (!dadosAntro.idade || !dadosAntro.altura || !dadosAntro.peso || !dadosAntro.genero) {
      alert('Por favor, preencha todos os campos b√°sicos!');
      return;
    }

    const idade = parseInt(dadosAntro.idade);
    const altura = parseFloat(dadosAntro.altura) / 100; // converter cm para metros
    const peso = parseFloat(dadosAntro.peso);
    
    // C√°lculo do IMC
    const imc = (peso / (altura * altura)).toFixed(1);
    
    // Interpreta√ß√£o inteligente baseada nos materiais
    const interpretacao = getInterpretacaoInteligente(idade, parseFloat(imc), dadosAntro.atividadeFisica, dadosAntro.genero, condicoes);
    
    setResultados({
      imc: imc,
      classificacao: interpretacao.categoria,
      interpretacao: interpretacao.texto,
      alertas: interpretacao.alertas,
      biomarcadores: interpretacao.biomarcadores
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white p-6">
      {/* HEADER COM NAVEGA√á√ÉO */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold mb-2">üìä An√°lise Anthropom√©trica</h1>
        <p className="text-purple-200">Interpreta√ß√£o inteligente e personalizada com dados clim√°ticos</p>
        
        {/* BOT√ïES DE NAVEGA√á√ÉO */}
        <div className="flex flex-wrap justify-center gap-4 mt-6">
          <button
            onClick={() => onVoltar()}
            className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          >
            ‚Üê Voltar ao Menu
          </button>
          
          <button
            onClick={() => buscarClimaPorCEP(dadosAntro.cep)}
            disabled={carregandoClima || !dadosAntro.cep}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors disabled:opacity-50"
          >
            {carregandoClima ? '‚è≥ Buscando...' : 'üå§Ô∏è Analisar Clima'}
          </button>
          
          <button
            onClick={() => alert('Funcionalidade em desenvolvimento!')}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          >
            üìä Hist√≥rico IMC
          </button>
          
          <button
            onClick={() => alert('Redirecionando para PHILAUTIA...')}
            className="bg-pink-600 hover:bg-pink-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          >
            üíñ PHILAUTIA
          </button>
        </div>
      </div>

      {/* FORMUL√ÅRIO */}
      <div className="max-w-4xl mx-auto space-y-8">
        {/* ‚úÖ SE√á√ÉO A: DADOS B√ÅSICOS */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
          <h2 className="text-2xl font-bold mb-4 text-center">üìä Dados B√°sicos</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* IDADE */}
            <div>
              <label className="block text-purple-200 mb-2">Idade (anos)</label>
              <input
                type="number"
                value={dadosAntro.idade}
                onChange={(e) => setDadosAntro({...dadosAntro, idade: e.target.value})}
                className="w-full p-3 bg-purple-900/50 border border-purple-500/50 rounded-lg text-white"
                placeholder="Ex: 35"
              />
            </div>

            {/* ALTURA */}
            <div>
              <label className="block text-purple-200 mb-2">Altura (cm)</label>
              <input
                type="number"
                value={dadosAntro.altura}
                onChange={(e) => setDadosAntro({...dadosAntro, altura: e.target.value})}
                className="w-full p-3 bg-purple-900/50 border border-purple-500/50 rounded-lg text-white"
                placeholder="Ex: 175"
              />
            </div>

            {/* PESO */}
            <div>
              <label className="block text-purple-200 mb-2">Peso (kg)</label>
              <input
                type="number"
                step="0.1"
                value={dadosAntro.peso}
                onChange={(e) => setDadosAntro({...dadosAntro, peso: e.target.value})}
                className="w-full p-3 bg-purple-900/50 border border-purple-500/50 rounded-lg text-white"
                placeholder="Ex: 70.5"
              />
            </div>

            {/* G√äNERO */}
            <div>
              <label className="block text-purple-200 mb-2">G√™nero</label>
              <select
                value={dadosAntro.genero}
                onChange={(e) => setDadosAntro({...dadosAntro, genero: e.target.value})}
                className="w-full p-3 bg-purple-900/50 border border-purple-500/50 rounded-lg text-white"
              >
                <option value="">Selecione...</option>
                <option value="masculino">Masculino</option>
                <option value="feminino">Feminino</option>
              </select>
            </div>

            {/* CEP - INTEGRA√á√ÉO CLIMA */}
            <div>
              <label className="block text-purple-200 mb-2">CEP üå§Ô∏è</label>
              <input
                type="text"
                value={dadosAntro.cep}
                onChange={(e) => setDadosAntro({...dadosAntro, cep: e.target.value.replace(/\D/g, '').replace(/(\d{5})(\d)/, '$1-$2')})}
                className="w-full p-3 bg-purple-900/50 border border-purple-500/50 rounded-lg text-white"
                placeholder="Ex: 01310-100"
                maxLength="9"
              />
              <p className="text-purple-300 text-xs mt-1">
                üí° CEP ser√° usado para an√°lise clima/metabolismo personalizada
              </p>
            </div>

            {/* ATIVIDADE F√çSICA */}
            <div>
              <label className="block text-purple-200 mb-2">N√≠vel de Atividade</label>
              <select
                value={dadosAntro.atividadeFisica}
                onChange={(e) => setDadosAntro({...dadosAntro, atividadeFisica: e.target.value})}
                className="w-full p-3 bg-purple-900/50 border border-purple-500/50 rounded-lg text-white"
              >
                <option value="sedentario">Sedent√°rio</option>
                <option value="leve">Atividade Leve</option>
                <option value="moderada">Atividade Moderada</option>
                <option value="intensa">Atividade Intensa</option>
                <option value="atleta">Atleta Profissional</option>
              </select>
            </div>
          </div>
        </div>

        {/* ‚úÖ SE√á√ÉO B: CONDI√á√ïES ESPECIAIS */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-red-500/30">
          <h2 className="text-2xl font-bold mb-4 text-center">üè• Condi√ß√µes Especiais</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* DOEN√áAS */}
            <div>
              <label className="block text-red-200 mb-2">Doen√ßas/Condi√ß√µes</label>
              <div className="space-y-2">
                {['Diabetes', 'Hipertens√£o', 'Colesterol Alto', 'Tireoide', 'Artrite', 'Outras'].map(doenca => (
                  <label key={doenca} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={condicoes.doencas.includes(doenca)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setCondicoes({...condicoes, doencas: [...condicoes.doencas, doenca]});
                        } else {
                          setCondicoes({...condicoes, doencas: condicoes.doencas.filter(d => d !== doenca)});
                        }
                      }}
                      className="rounded"
                    />
                    <span className="text-red-100">{doenca}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* MEDICAMENTOS */}
            <div>
              <label className="block text-red-200 mb-2">Medicamentos em Uso</label>
              <div className="space-y-2">
                {['Antidepressivos', 'Corticoides', 'Insulina', 'Anti-inflamat√≥rios', 'Diur√©ticos', 'Outros'].map(med => (
                  <label key={med} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={condicoes.medicamentos.includes(med)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setCondicoes({...condicoes, medicamentos: [...condicoes.medicamentos, med]});
                        } else {
                          setCondicoes({...condicoes, medicamentos: condicoes.medicamentos.filter(m => m !== med)});
                        }
                      }}
                      className="rounded"
                    />
                    <span className="text-red-100">{med}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* CIRURGIAS */}
            <div>
              <label className="block text-red-200 mb-2">Cirurgias Realizadas</label>
              <textarea
                value={condicoes.cirurgias}
                onChange={(e) => setCondicoes({...condicoes, cirurgias: e.target.value})}
                className="w-full p-3 bg-red-900/30 border border-red-500/50 rounded-lg text-white h-20"
                placeholder="Descreva cirurgias relevantes..."
              />
            </div>

            {/* SEQUELAS */}
            <div>
              <label className="block text-red-200 mb-2">Sequelas/Limita√ß√µes</label>
              <textarea
                value={condicoes.sequelas}
                onChange={(e) => setCondicoes({...condicoes, sequelas: e.target.value})}
                className="w-full p-3 bg-red-900/30 border border-red-500/50 rounded-lg text-white h-20"
                placeholder="Limita√ß√µes f√≠sicas ou funcionais..."
              />
            </div>
          </div>
        </div>

        {/* BOT√ÉO CALCULAR */}
        <div className="text-center">
          <button
            onClick={calcularIMC}
            className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold py-4 px-8 rounded-xl text-xl shadow-lg transform hover:scale-105 transition-all duration-200"
          >
            üî¨ Calcular & Interpretar
          </button>
        </div>
        {/* ‚úÖ SE√á√ÉO C: RESULTADOS INTELIGENTES */}
        {resultados && (
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-green-500/30 space-y-4">
            <h2 className="text-2xl font-bold mb-4 text-center">üìä An√°lise Inteligente</h2>
            
            {/* IMC */}
            <div className="text-center">
              <p className="text-4xl font-bold text-green-400 mb-2">{resultados.imc}</p>
              <p className="text-xl text-green-200">{resultados.classificacao}</p>
            </div>

            {/* INTERPRETA√á√ÉO */}
            <div className="bg-green-900/30 p-4 rounded-lg">
              <p className="text-green-100">{resultados.interpretacao}</p>
            </div>

            {/* ALERTAS */}
            {resultados.alertas && resultados.alertas.length > 0 && (
              <div className="space-y-2">
                {resultados.alertas.map((alerta, index) => (
                  <div key={index} className="bg-yellow-900/30 p-3 rounded-lg border-l-4 border-yellow-500">
                    <p className="text-yellow-100 text-sm">{alerta}</p>
                  </div>
                ))}
              </div>
            )}

            {/* BIOMARCADORES */}
            {resultados.biomarcadores && (
              <div className="bg-purple-900/30 p-4 rounded-lg">
                <p className="text-purple-100 text-sm">{resultados.biomarcadores}</p>
              </div>
            )}

            {/* üå§Ô∏è SE√á√ÉO CLIM√ÅTICA */}
            {dadosClima && (
              <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-500/30">
                <h3 className="text-lg font-bold text-blue-200 mb-3">üå§Ô∏è An√°lise Clim√°tica Personalizada</h3>
                
                {/* DADOS CLIM√ÅTICOS */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-300">{dadosClima.temperatura}¬∞C</p>
                    <p className="text-blue-200 text-xs">Temperatura</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-300">{dadosClima.sensacao}¬∞C</p>
                    <p className="text-blue-200 text-xs">Sensa√ß√£o</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-300">{dadosClima.umidade}%</p>
                    <p className="text-blue-200 text-xs">Umidade</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-300">{dadosClima.pressao}</p>
                    <p className="text-blue-200 text-xs">Press√£o (hPa)</p>
                  </div>
                </div>

                <p className="text-blue-100 mb-3">
                  <strong>üìç {dadosClima.cidade}/{dadosClima.uf}</strong> - {dadosClima.descricao}
                </p>
                
                {/* RECOMENDA√á√ÉO CLIM√ÅTICA */}
                <div className="bg-blue-800/50 p-3 rounded-lg">
                  <h4 className="font-bold text-blue-200 mb-2">üî¨ Impacto Metab√≥lico:</h4>
                  <p className="text-blue-100 text-sm mb-2">
                    {getRecomendacaoClimatica(dadosClima.temperatura, dadosClima.umidade, parseFloat(resultados.imc)).recomendacao}
                  </p>
                  <p className="text-blue-200 text-xs italic">
                    {getRecomendacaoClimatica(dadosClima.temperatura, dadosClima.umidade, parseFloat(resultados.imc)).impactoMetabolico}
                  </p>
                </div>
              </div>
            )}

            {/* AVISO NORMOSE */}
            <div className="bg-red-900/30 p-4 rounded-lg border border-red-500/30">
              <p className="text-red-200 text-sm">
                <strong>‚ö†Ô∏è Cuidado com a "NORMOSE"!</strong> Lembre-se: IMC √© uma ferramenta estat√≠stica. A composi√ß√£o corporal, idade biol√≥gica, fatores clim√°ticos e contexto individual s√£o fundamentais!
              </p>
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default TelaAnthropometrica;
