// =================================================================
// --- BLOCO UNIFICADO: AVALIA√á√ÉO E RESULTADOS ANTROPOM√âTRICOS ---
// =================================================================

// (Manter configura√ß√µes anteriores)

// Implementa√ß√£o de fun√ß√µes auxiliares
function getLocalizedText(key, lang = APP_CONFIG.defaultLanguage) {
    // Garantir fallback para portugu√™s se l√≠ngua n√£o suportada
    const selectedLang = APP_CONFIG.supportedLanguages.includes(lang) ? lang : 'pt';
    return translations[selectedLang][key] || translations['pt'][key] || key;
}

function gerarRecomendacoesDetalhadas(recomendacoes) {
    // Se n√£o houver recomenda√ß√µes, retornar mensagem padr√£o
    if (!recomendacoes || recomendacoes.length === 0) {
        return `
            <div class="recomendacao-padrao">
                <p>Parab√©ns! Seus indicadores est√£o em n√≠veis saud√°veis.</p>
                <p>Continue mantendo seus bons h√°bitos.</p>
            </div>
        `;
    }

    // Classificar recomenda√ß√µes por prioridade
    const recomendacoesClassificadas = recomendacoes.sort((a, b) => {
        const prioridadeMap = {
            'alta': 3,
            'media': 2,
            'baixa': 1
        };
        return (prioridadeMap[b.prioridade] || 0) - (prioridadeMap[a.prioridade] || 0);
    });

    // Gerar HTML para recomenda√ß√µes
    return `
        <div class="recomendacoes-container">
            ${recomendacoesClassificadas.map(rec => `
                <div class="recomendacao-item ${rec.prioridade}">
                    <div class="recomendacao-icone">
                        ${getIconePrioridade(rec.prioridade)}
                    </div>
                    <div class="recomendacao-conteudo">
                        <h4>${rec.titulo}</h4>
                        <p>${rec.descricao}</p>
                        ${rec.acoes ? `
                            <div class="recomendacao-acoes">
                                <strong>A√ß√µes sugeridas:</strong>
                                <ul>
                                    ${rec.acoes.map(acao => `<li>${acao}</li>`).join('')}
                                </ul>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

function getIconePrioridade(prioridade) {
    const iconMap = {
        'alta': 'üö®',
        'media': '‚ö†Ô∏è',
        'baixa': '‚ÑπÔ∏è'
    };
    return iconMap[prioridade] || '‚ÑπÔ∏è';
}

// Fun√ß√£o para gerar recomenda√ß√µes baseadas no resultado do IMC
function gerarRecomendacoesIMC(resultadoIMC) {
    const recomendacoes = [];

    // Recomenda√ß√µes baseadas na categoria do IMC
    switch (resultadoIMC.interpretacao.categoriaTradicional) {
        case 'Abaixo do Peso':
            recomendacoes.push({
                titulo: 'Ganho de Peso Saud√°vel',
                descricao: 'Seu IMC indica que voc√™ est√° abaixo do peso ideal.',
                prioridade: 'alta',
                acoes: [
                    'Consultar nutricionista',
                    'Aumentar ingest√£o cal√≥rica com alimentos nutritivos',
                    'Praticar exerc√≠cios de fortalecimento muscular'
                ]
            });
            break;
        
        case 'Sobrepeso':
            recomendacoes.push({
                titulo: 'Emagrecimento Saud√°vel',
                descricao: 'Seu IMC sugere que voc√™ est√° com sobrepeso.',
                prioridade: 'media',
                acoes: [
                    'Adotar dieta balanceada',
                    'Praticar atividade f√≠sica regularmente',
                    'Consultar profissionais de sa√∫de'
                ]
            });
            break;
        
        case 'Obesidade':
            recomendacoes.push({
                titulo: 'Plano de Sa√∫de Integrado',
                descricao: 'Seu IMC indica obesidade, requerendo aten√ß√£o especial.',
                prioridade: 'alta',
                acoes: [
                    'Acompanhamento m√©dico completo',
                    'Plano nutricional personalizado',
                    'Programa de atividade f√≠sica supervisionado',
                    'Avalia√ß√£o de sa√∫de mental'
                ]
            });
            break;
    }

    // Adicionar recomenda√ß√µes espec√≠ficas do Paradoxo de Hollyfield
    if (resultadoIMC.interpretacao.interpretacoes.hollyfield) {
        recomendacoes.push({
            titulo: 'An√°lise Hollyfield',
            descricao: 'Identificamos particularidades em sua composi√ß√£o corporal.',
            prioridade: 'baixa',
            acoes: [
                'Investigar fatores metab√≥licos espec√≠ficos',
                'Realizar exames complementares'
            ]
        });
    }

    return recomendacoes;
}

// Atualizar fun√ß√£o principal para incluir recomenda√ß√µes de IMC
function renderResultadosAntropometricos(dadosInput, lang = APP_CONFIG.defaultLanguage) {
    const resultadoIMC = calcularIMCMultifatorial(dadosInput);
    
    // Gerar recomenda√ß√µes espec√≠ficas de IMC
    const recomendacoesIMC = gerarRecomendacoesIMC(resultadoIMC);
    
    // Combinar com outras recomenda√ß√µes existentes
    const todasRecomendacoes = [
        ...recomendacoesIMC,
        ...(resultadoIMC.recomendacoes || [])
    ];

    const container = document.getElementById('resultScreen');

    const gerarHTMLResultados = () => {
        return `
            <div class="container-resultados">
                <section class="resultado-imc">
                    <h2>Resultado do IMC</h2>
                    <div class="imc-detalhes">
                        <span class="valor-imc">${resultadoIMC.imcAjustado.toFixed(2)}</span>
                        <span class="categoria-imc">${resultadoIMC.interpretacao.categoriaTradicional}</span>
                    </div>
                </section>
                
                <section class="recomendacoes-detalhadas">
                    <h3>${getLocalizedText('recommendationTitle', lang)}</h3>
                    <div class="recomendacoes-grid">
                        ${gerarRecomendacoesDetalhadas(todasRecomendacoes)}
                    </div>
                </section>
            </div>
        `;
    };

    container.innerHTML = gerarHTMLResultados();

    // Trackear conclus√£o da avalia√ß√£o
    AnalyticsService.trackAssessmentCompletion(userData);
}